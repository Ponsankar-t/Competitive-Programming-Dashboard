{"ast":null,"code":"var _jsxFileName = \"Z:\\\\Statista\\\\frontend\\\\statista\\\\src\\\\retrieve.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyComponent = () => {\n  _s();\n  const [dataValue, setDataValue] = useState(null); // State variable to store retrieved data\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/mer/users'); // Replace with your API endpoint\n        setDataValue(response.data.specificField); // Access the desired field from the response\n      } catch (error) {\n        console.error(error);\n        // Handle errors (display an error message, etc.)\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array ensures data is fetched only once on component mount\n\n  // Use the dataValue in your component logic\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: dataValue !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: dataValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 30\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(MyComponent, \"h0aj0SOwgfh34pi3wMI6Hc335PE=\");\n_c = MyComponent;\nexport default MyComponent;\nvar _c;\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","MyComponent","_s","dataValue","setDataValue","fetchData","response","get","data","specificField","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["Z:/Statista/frontend/statista/src/retrieve.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst MyComponent = () => {\r\n  const [dataValue, setDataValue] = useState(null); // State variable to store retrieved data\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/mer/users'); // Replace with your API endpoint\r\n        setDataValue(response.data.specificField); // Access the desired field from the response\r\n      } catch (error) {\r\n        console.error(error);\r\n        // Handle errors (display an error message, etc.)\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // Empty dependency array ensures data is fetched only once on component mount\r\n\r\n  // Use the dataValue in your component logic\r\n  return (\r\n    <div>\r\n      {dataValue !== null && <p>{dataValue}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElDC,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,iCAAiC,CAAC,CAAC,CAAC;QACrEH,YAAY,CAACE,QAAQ,CAACE,IAAI,CAACC,aAAa,CAAC,CAAC,CAAC;MAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpB;MACF;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,oBACEL,OAAA;IAAAY,QAAA,EACGT,SAAS,KAAK,IAAI,iBAAIH,OAAA;MAAAY,QAAA,EAAIT;IAAS;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEV,CAAC;AAACd,EAAA,CAvBID,WAAW;AAAAgB,EAAA,GAAXhB,WAAW;AAyBjB,eAAeA,WAAW;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}